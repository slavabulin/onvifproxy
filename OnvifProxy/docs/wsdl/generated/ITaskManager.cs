//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5420
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="urn:ias:cvss:tm:1.0", ConfigurationName="TaskManager")]
public interface TaskManager
{
    
    [System.ServiceModel.OperationContractAttribute(Action="urn:ias:cvss:tm:1.0/CreateTask", ReplyAction="*")]
    [System.ServiceModel.XmlSerializerFormatAttribute()]
    [return: System.ServiceModel.MessageParameterAttribute(Name="TaskToken")]
    string CreateTask(System.Xml.XmlElement Task, System.DateTime TimeBegin, System.DateTime TimeEnd, FeedbackType Feedback);
    
    [System.ServiceModel.OperationContractAttribute(Action="urn:ias:cvss:tm:1.0/GetTaskStatus", ReplyAction="*")]
    [System.ServiceModel.XmlSerializerFormatAttribute()]
    [return: System.ServiceModel.MessageParameterAttribute(Name="Status")]
    TaskStatus GetTaskStatus(out string Message, string TaskToken);
    
    // CODEGEN: Generating message contract since message part namespace () does not match the default value (urn:ias:cvss:tm:1.0)
    [System.ServiceModel.OperationContractAttribute(Action="urn:ias:cvss:tm:1.0/GetTaskResults", ReplyAction="*")]
    [System.ServiceModel.XmlSerializerFormatAttribute()]
    [return: System.ServiceModel.MessageParameterAttribute(Name="Any")]
    GetTaskResultsResponse GetTaskResults(GetTaskResultsRequest request);
    
    [System.ServiceModel.OperationContractAttribute(Action="urn:ias:cvss:tm:1.0/DeleteTask", ReplyAction="*")]
    [System.ServiceModel.XmlSerializerFormatAttribute()]
    void DeleteTask(string TaskToken);
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("svcutil", "3.0.4506.2152")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ias:cvss:tm:1.0")]
public partial class FeedbackType
{
    
    private System.Xml.XmlElement[] anyField;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAnyElementAttribute(Order=0)]
    public System.Xml.XmlElement[] Any
    {
        get
        {
            return this.anyField;
        }
        set
        {
            this.anyField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("svcutil", "3.0.4506.2152")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ias:cvss:tm:1.0")]
public enum TaskStatus
{
    
    /// <remarks/>
    NotActive,
    
    /// <remarks/>
    InProgress,
    
    /// <remarks/>
    Failed,
    
    /// <remarks/>
    Expired,
    
    /// <remarks/>
    Done,
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.MessageContractAttribute(WrapperName="GetTaskResults", WrapperNamespace="urn:ias:cvss:tm:1.0", IsWrapped=true)]
public partial class GetTaskResultsRequest
{
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:ias:cvss:tm:1.0", Order=0)]
    public string TaskToken;
    
    public GetTaskResultsRequest()
    {
    }
    
    public GetTaskResultsRequest(string TaskToken)
    {
        this.TaskToken = TaskToken;
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.MessageContractAttribute(WrapperName="GetTaskResultsResponse", WrapperNamespace="urn:ias:cvss:tm:1.0", IsWrapped=true)]
public partial class GetTaskResultsResponse
{
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
    [System.Xml.Serialization.XmlAnyElementAttribute()]
    public System.Xml.XmlElement Any;
    
    public GetTaskResultsResponse()
    {
    }
    
    public GetTaskResultsResponse(System.Xml.XmlElement Any)
    {
        this.Any = Any;
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface TaskManagerChannel : TaskManager, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class TaskManagerClient : System.ServiceModel.ClientBase<TaskManager>, TaskManager
{
    
    public TaskManagerClient()
    {
    }
    
    public TaskManagerClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public TaskManagerClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public TaskManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public TaskManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public string CreateTask(System.Xml.XmlElement Task, System.DateTime TimeBegin, System.DateTime TimeEnd, FeedbackType Feedback)
    {
        return base.Channel.CreateTask(Task, TimeBegin, TimeEnd, Feedback);
    }
    
    public TaskStatus GetTaskStatus(out string Message, string TaskToken)
    {
        return base.Channel.GetTaskStatus(out Message, TaskToken);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    GetTaskResultsResponse TaskManager.GetTaskResults(GetTaskResultsRequest request)
    {
        return base.Channel.GetTaskResults(request);
    }
    
    public System.Xml.XmlElement GetTaskResults(string TaskToken)
    {
        GetTaskResultsRequest inValue = new GetTaskResultsRequest();
        inValue.TaskToken = TaskToken;
        GetTaskResultsResponse retVal = ((TaskManager)(this)).GetTaskResults(inValue);
        return retVal.Any;
    }
    
    public void DeleteTask(string TaskToken)
    {
        base.Channel.DeleteTask(TaskToken);
    }
}
